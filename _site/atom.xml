<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-20T17:06:53+08:00</updated><id>http://localhost:4000/</id><title type="html">Truth Be Known</title><subtitle>Elegant theme for Jekyll.</subtitle><author><name>xiao.liang</name></author><entry><title type="html">Redis源码分析(数据结构篇)——双向链表(doubly linked list)</title><link href="http://localhost:4000/tech/2017/12/13/Redis-code-analysis-ds-doubly-linked-list/" rel="alternate" type="text/html" title="Redis源码分析(数据结构篇)——双向链表(doubly linked list)" /><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><id>http://localhost:4000/tech/2017/12/13/Redis-code-analysis-ds-doubly-linked-list</id><content type="html" xml:base="http://localhost:4000/tech/2017/12/13/Redis-code-analysis-ds-doubly-linked-list/">&lt;p&gt;该系列是Redis源码分析的第一部分，主要对Redis的一些数据结构进行解读。注意，这里的数据结构并不是Redis使用层面上的数据结构（string, list, set等），而是支撑这些“数据结构”实现的更加底层的数据结构。&lt;/p&gt;

&lt;p&gt;这是该系列的第一篇文章，讲解的是Redis实现的双向链表。链表作为最基本的数据结构之一，想必大家都已经烂熟于心。那么Redis实现的链表有何高明之处呢？还是有的。简而言之，Redis的链表是一个双向的异质链表，可以存储任意数据类型。&lt;/p&gt;

&lt;h2 id=&quot;结构定义&quot;&gt;结构定义&lt;/h2&gt;

&lt;p&gt;Redis的链表定义了如下三个数据结构：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listIter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listIter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结合上面的代码，我们可以看到，一个链表包含了如下一些结构：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一个指向链表头的指针&lt;/li&gt;
  &lt;li&gt;一个指向链表尾的指针&lt;/li&gt;
  &lt;li&gt;链表的长度&lt;/li&gt;
  &lt;li&gt;三个函数指针，当链表存储的是自定义的类型时，要求用户提供该类型的复制、释放和匹配函数（dup, free, match）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而一个链表节点包含了：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一个指向前一节点的指针&lt;/li&gt;
  &lt;li&gt;一个指向后一节点的指针&lt;/li&gt;
  &lt;li&gt;指向实际存储数据的指针&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此之外，还定义了一个迭代器（iterator）用于遍历链表，它支持如下一些操作：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;listGetIterator, listReleaseIterator 生成/销毁一个迭代器&lt;/li&gt;
  &lt;li&gt;listRewind, listRewindTail 重定位至头部/尾部&lt;/li&gt;
  &lt;li&gt;listNext 返回下一个节点&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;操作实现&quot;&gt;操作实现&lt;/h2&gt;

&lt;p&gt;Redis的链表实现和算法书上的实现并无差异，加之链表确实太简单了=。= 所以就不在赘述啦。&lt;/p&gt;

&lt;p&gt;整体来说，Redis的链表实现比较有意思的地方就是使用函数指针来支持任意类型的存储，用户只需要指定需要的函数即可，颇有一种C++继承的味道。想想自己本科写的异质链表，瞬间感觉low爆了QAQ&lt;/p&gt;</content><author><name>xiao.liang</name></author><category term="Redis" /><summary type="html">该系列是Redis源码分析的第一部分，主要对Redis的一些数据结构进行解读。注意，这里的数据结构并不是Redis使用层面上的数据结构（string, list, set等），而是支撑这些“数据结构”实现的更加底层的数据结构。</summary></entry></feed>